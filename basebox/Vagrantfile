# ZonamaDev Vagrantfile
#
# Author: Lord Kator <lordkator@swgemu.com>
#
# Created: Wed Dec 23 17:54:28 EST 2015
#

## Check for required plugins
plugins_installed = false

[
  { :name => "vagrant-vbguest", :version => ">= 0.12.0" },
  { :name => "vagrant-reload", :version => ">= 0.0.1" },
].each do |plugin|
  if not Vagrant.has_plugin?(plugin[:name], plugin[:version])
    # raise "#{plugin[:name]} #{plugin[:version]} is required. Please run `vagrant plugin install #{plugin[:name]}`"
    system("vagrant plugin install #{plugin[:name]}")
    plugins_installed = true
  end
end

# If we had to install anything they need to restart
if plugins_installed
  puts "Some plugins had to be installed, please re-run your command"
  exit 1
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # A bit of a hack, not sure if there is a "right way" to detect that this is the very first provision
  is_first_provision = !File.exist?("#{File.dirname(__FILE__)}/.vagrant/machines/default/virtualbox/action_provision")

  if is_first_provision then
    is_first_provision = !File.exist?("#{File.dirname(__FILE__)}/.vagrant/machines/default/vmware_fusion/action_provision")
  end

  config.vm.hostname = "swgemudev"

  # vbguest settings for first up
  if is_first_provision
    config.vbguest.auto_update = false
    config.vbguest.no_install = true
  end

  # Base Box
  #config.vm.box = "debian/jessie64"
  #config.vm.box = "bento/debian-8.5"
  config.vm.box = "bento/debian-9.5"
  config.vm.box_version = "201808.24.0"

  # Setup port forwarding
  config.vm.network "forwarded_port", guest: 44480,  host: 44480

  # TODO: Can we autoconfig this rather than prompting for which interface to bridge?
  # config.vm.network "public_network", use_dhcp_assigned_default_route: true, auto_config: true

  # This keeps windows hosts from blowing their brains out about rsync missing
  config.vm.synced_folder '.', '/vagrant', :disabled => true
  
  # Tell themn what to do next...
  config.vm.post_up_message = <<-UPMSG

      ###################################
      ## WELCOME TO SWGEMUDEV BASE BOX ##
      ###################################

      Your box is up now, you can use the console to work directly on the box.

      From this folder you can do:
          vagrant ssh     # ssh into the box
          vagrant halt    # shutdown the box
          vagrant destroy # destroy/delete the box WARNING: You will loose everything!
          vagrant snapshot save {name} # Create a named snapshot so you can restore later

      For more commands type: vagrant help

  UPMSG

  ###############
  ## Providers ##
  ###############

  [ "vmware_fusion", "vmware_workstation", "virtualbox" ].each do |provider|
    config.vm.provider provider do |v|
      v.name = "swgemudev-basebox-" + Time.now.to_i.to_s
      v.memory = "4096"
      v.cpus = 4
      v.gui = true

      if provider == "virtualbox"
        v.customize ["modifyvm", :id, "--accelerate3d", "off"]
        v.customize ["modifyvm", :id, "--accelerate2dvideo", "on"]
        v.customize ["modifyvm", :id, "--vram", "128"]
        v.customize ["modifyvm", :id, "--audio", "null"]
        v.customize 'post-boot', ["controlvm", :id, "setvideomodehint", "1280", "720", "24"]
	# Will this make it install faster?
	# see https://github.com/mitchellh/vagrant/issues/1807
	## NOPE 2016-01-02:
	## v.customize ["modifyvm", :id, "--nictype1", "virtio" ]
	## v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
	## v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      end
    end
  end

  ###############
  ## PROVISION ##
  ###############

  # Copy local config into the host
  [ 'extras', '.bash_profile', '.bash_login', '.bash_logout', '.bashrc', '.vimrc', '.gitconfig', '.visual', '.gerrit_username', '.id_rsa', '.id_rsa.pub' ].each do |fn|
    src = "#{File.dirname(__FILE__)}/#{fn}"

    if File.exist?(src)
      dst = fn
      if src[0..5] == 'id_rsa'
	dst = ".ssh/" + src
      end
      config.vm.provision :file, source: src, destination: dst
    end
  end

  zonamadev_url=%x[source #{File.dirname(__FILE__)}/../common/global.config;echo $ZONAMADEV_URL].strip
  zonamadev_branch=%x[git rev-parse --abbrev-ref HEAD].strip
  # Execute firstboot.sh
  config.vm.provision :shell, name: "firstboot", run: "always", inline: <<-SHELL
    if [ ! -f "ZonamaDev/basebox/scripts/firstboot" ]; then
      echo "** Fresh Guest **"
      apt-get update
      apt-get -y install git moreutils ethtool
      ethtool -K eth0 gro off || ethtool -K enp0s3 gro off
      git clone -b #{zonamadev_branch} #{zonamadev_url}
    else
      echo "** Existing Guest **"
      pushd ZonamaDev;git pull;git checkout #{zonamadev_branch} || true;popd
    fi
    exec ZonamaDev/basebox/scripts/firstboot
  SHELL

  if is_first_provision
    # Make sure updated kernel is loaded etc.
    config.vm.provision :reload

    # Tell them to be patient!
    config.vm.provision :shell, name: "firstboot.sh", inline: <<-SHELL
	chvt 8
        ethtool -K eth0 gro off || ethtool -K enp0s3 gro off
	echo "** Please wait while provisioning continues **" > /dev/console
    SHELL
  end

  # Enable Graphical Boot
  config.vm.provision :shell, name: "graphical.target", inline: "systemctl set-default -f graphical.target || true"

  # One last reboot with all the drivers loaded
  config.vm.provision :reload
end
#
# -*- mode: ruby -*-
# vi: ft=ruby sw=2
